/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WaffleFactoryInterface extends ethers.utils.Interface {
  functions: {
    "ChainlinkFee()": FunctionFragment;
    "ChainlinkKeyHash()": FunctionFragment;
    "ChainlinkLINKToken()": FunctionFragment;
    "ChainlinkVRFCoordinator()": FunctionFragment;
    "LINKToken()": FunctionFragment;
    "createWaffle(address,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ChainlinkFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ChainlinkKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ChainlinkLINKToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ChainlinkVRFCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LINKToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createWaffle",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ChainlinkFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ChainlinkKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ChainlinkLINKToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ChainlinkVRFCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LINKToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWaffle",
    data: BytesLike
  ): Result;

  events: {
    "WaffleCreated(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WaffleCreated"): EventFragment;
}

export class WaffleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WaffleFactoryInterface;

  functions: {
    ChainlinkFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    ChainlinkKeyHash(overrides?: CallOverrides): Promise<[string]>;

    ChainlinkLINKToken(overrides?: CallOverrides): Promise<[string]>;

    ChainlinkVRFCoordinator(overrides?: CallOverrides): Promise<[string]>;

    LINKToken(overrides?: CallOverrides): Promise<[string]>;

    createWaffle(
      _nftContract: string,
      _nftID: BigNumberish,
      _slotPrice: BigNumberish,
      _numSlotsAvailable: BigNumberish,
      _raffleExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ChainlinkFee(overrides?: CallOverrides): Promise<BigNumber>;

  ChainlinkKeyHash(overrides?: CallOverrides): Promise<string>;

  ChainlinkLINKToken(overrides?: CallOverrides): Promise<string>;

  ChainlinkVRFCoordinator(overrides?: CallOverrides): Promise<string>;

  LINKToken(overrides?: CallOverrides): Promise<string>;

  createWaffle(
    _nftContract: string,
    _nftID: BigNumberish,
    _slotPrice: BigNumberish,
    _numSlotsAvailable: BigNumberish,
    _raffleExpiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ChainlinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    ChainlinkKeyHash(overrides?: CallOverrides): Promise<string>;

    ChainlinkLINKToken(overrides?: CallOverrides): Promise<string>;

    ChainlinkVRFCoordinator(overrides?: CallOverrides): Promise<string>;

    LINKToken(overrides?: CallOverrides): Promise<string>;

    createWaffle(
      _nftContract: string,
      _nftID: BigNumberish,
      _slotPrice: BigNumberish,
      _numSlotsAvailable: BigNumberish,
      _raffleExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    WaffleCreated(
      waffle?: string | null,
      owner?: string | null,
      nftContract?: string | null,
      nftID?: null,
      slotPrice?: null,
      numSlotsAvailable?: null,
      raffleExpiry?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        waffle: string;
        owner: string;
        nftContract: string;
        nftID: BigNumber;
        slotPrice: BigNumber;
        numSlotsAvailable: BigNumber;
        raffleExpiry: BigNumber;
      }
    >;
  };

  estimateGas: {
    ChainlinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    ChainlinkKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    ChainlinkLINKToken(overrides?: CallOverrides): Promise<BigNumber>;

    ChainlinkVRFCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    LINKToken(overrides?: CallOverrides): Promise<BigNumber>;

    createWaffle(
      _nftContract: string,
      _nftID: BigNumberish,
      _slotPrice: BigNumberish,
      _numSlotsAvailable: BigNumberish,
      _raffleExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ChainlinkFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ChainlinkKeyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ChainlinkLINKToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ChainlinkVRFCoordinator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LINKToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createWaffle(
      _nftContract: string,
      _nftID: BigNumberish,
      _slotPrice: BigNumberish,
      _numSlotsAvailable: BigNumberish,
      _raffleExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
