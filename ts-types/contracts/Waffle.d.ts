/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WaffleInterface extends ethers.utils.Interface {
  functions: {
    "addressToSlotsOwned(address)": FunctionFragment;
    "collectRandomWinner()": FunctionFragment;
    "deleteRaffle()": FunctionFragment;
    "disburseWinner()": FunctionFragment;
    "nftContract()": FunctionFragment;
    "nftID()": FunctionFragment;
    "nftOwned()": FunctionFragment;
    "numSlotsAvailable()": FunctionFragment;
    "numSlotsFilled()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseSlot(uint256)": FunctionFragment;
    "raffleExpiry()": FunctionFragment;
    "randomResult()": FunctionFragment;
    "randomResultRequested()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "refundSlot(uint256)": FunctionFragment;
    "slotOwners(uint256)": FunctionFragment;
    "slotPrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressToSlotsOwned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRandomWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRaffle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disburseWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftID", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftOwned", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numSlotsAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSlotsFilled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomResultRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "slotPrice", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addressToSlotsOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRandomWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftOwned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numSlotsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numSlotsFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomResultRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundSlot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotOwners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotPrice", data: BytesLike): Result;

  events: {
    "RaffleWon(address)": EventFragment;
    "SlotsClaimed(address,uint256)": EventFragment;
    "SlotsRefunded(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RaffleWon"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlotsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlotsRefunded"): EventFragment;
}

export class Waffle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WaffleInterface;

  functions: {
    addressToSlotsOwned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collectRandomWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteRaffle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disburseWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftContract(overrides?: CallOverrides): Promise<[string]>;

    nftID(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftOwned(overrides?: CallOverrides): Promise<[boolean]>;

    numSlotsAvailable(overrides?: CallOverrides): Promise<[BigNumber]>;

    numSlotsFilled(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseSlot(
      _numSlots: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    raffleExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    randomResult(overrides?: CallOverrides): Promise<[BigNumber]>;

    randomResultRequested(overrides?: CallOverrides): Promise<[boolean]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundSlot(
      _numSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slotOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    slotPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addressToSlotsOwned(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectRandomWinner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteRaffle(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disburseWinner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  nftID(overrides?: CallOverrides): Promise<BigNumber>;

  nftOwned(overrides?: CallOverrides): Promise<boolean>;

  numSlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

  numSlotsFilled(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseSlot(
    _numSlots: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  raffleExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  randomResult(overrides?: CallOverrides): Promise<BigNumber>;

  randomResultRequested(overrides?: CallOverrides): Promise<boolean>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundSlot(
    _numSlots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slotOwners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  slotPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addressToSlotsOwned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRandomWinner(overrides?: CallOverrides): Promise<string>;

    deleteRaffle(overrides?: CallOverrides): Promise<void>;

    disburseWinner(overrides?: CallOverrides): Promise<void>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    nftID(overrides?: CallOverrides): Promise<BigNumber>;

    nftOwned(overrides?: CallOverrides): Promise<boolean>;

    numSlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    numSlotsFilled(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseSlot(
      _numSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    raffleExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    randomResult(overrides?: CallOverrides): Promise<BigNumber>;

    randomResultRequested(overrides?: CallOverrides): Promise<boolean>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refundSlot(
      _numSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slotOwners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    slotPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    RaffleWon(
      winner?: string | null
    ): TypedEventFilter<[string], { winner: string }>;

    SlotsClaimed(
      claimee?: string | null,
      numClaimed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { claimee: string; numClaimed: BigNumber }
    >;

    SlotsRefunded(
      refunder?: string | null,
      numRefunded?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { refunder: string; numRefunded: BigNumber }
    >;
  };

  estimateGas: {
    addressToSlotsOwned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRandomWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteRaffle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disburseWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    nftID(overrides?: CallOverrides): Promise<BigNumber>;

    nftOwned(overrides?: CallOverrides): Promise<BigNumber>;

    numSlotsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    numSlotsFilled(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseSlot(
      _numSlots: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    raffleExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    randomResult(overrides?: CallOverrides): Promise<BigNumber>;

    randomResultRequested(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundSlot(
      _numSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slotOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slotPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToSlotsOwned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectRandomWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteRaffle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disburseWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftOwned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSlotsAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSlotsFilled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseSlot(
      _numSlots: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    raffleExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomResultRequested(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundSlot(
      _numSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slotOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
